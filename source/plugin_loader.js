const fs=require("fs");const path=require("path");async function load_plugins(context){const plugin_cache={main:[],preload:[],renderer:[],titlebar:[]};const directory_path=path.join(__dirname,"../../../plugins");is_loading=new Promise(((resolve,reject)=>{fs.readdir(directory_path,((err,files)=>{if(err){console.error("Unable to scan directory:",err);return reject(err)}const js_files=files.filter((file=>path.extname(file)===".js"));js_files.forEach((file=>{const file_path=path.join(directory_path,file);console.log(`Loading file from context ${context}: ${file_path}`);const plugin=require(file_path);plugin.path=file_path;plugin_cache[plugin.context]?.push(plugin)}));resolve()}))}));await is_loading;return plugin_cache}function execute_plugins(plugins,context){plugins?.forEach((plugin=>{console.log(`Evaluating plugin ${plugin.name} in the ${context} context`);if(plugin.scope==="loader"){console.log("Using loader scope for plugin "+plugin.name);eval(`(${plugin.func.toString()})();`)}else{console.log("Using plugin scope for plugin "+plugin.scope);plugin.func()}}))}module.exports={load_plugins:load_plugins,execute_plugins:execute_plugins};